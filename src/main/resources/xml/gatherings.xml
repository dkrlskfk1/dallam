<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gatherings">
	<insert id="createGathering">
		INSERT INTO meeting 
		(meeting_id, member_email, meeting_location, 
		meeting_type, meeting_name, meeting_date, meeting_capacity, 
		meeting_participant_count, meeting_registration_end, meeting_created_by)
		VALUES(NULL, #{email}, #{location},
				#{type}, #{name}, #{dateTime}, #{capacity},
				1, #{registrationEnd}, (SELECT member_number FROM user WHERE member_email = #{email}))
	</insert>
	
	<select id="meetingId" parameterType="com.dallam.backend.dto.request.GatheringsCreateRequest" resultType="int">
    	SELECT LAST_INSERT_ID();
	</select>
	
	<insert id="createuserMeeting">
		INSERT INTO user_meeting (member_email, meeting_id, meeting_joined_at)
		VALUES (#{email}, #{meetingId}, CURRENT_TIMESTAMP)
	</insert>
	
	<insert id="createMeetingImage" parameterType="map">
		INSERT INTO meeting_image
		VALUES(#{meetingId},
				#{imageUrl},
				#{imageName},
				CURRENT_TIMESTAMP)
	</insert>
	
	<select id="meetings" resultType="com.dallam.backend.dto.response.GatheringsCreateResponse">
		SELECT 
		   m.meeting_id AS id, 
	       m.meeting_type AS type, 
	       m.meeting_name AS name, 
	       m.meeting_date AS dateTime, 
	       m.meeting_registration_end AS registrationEnd , 
	       m.meeting_location AS location, 
	       m.meeting_participant_count AS participantCount, 
	       m.meeting_capacity AS capacity, 
	       GROUP_CONCAT(mi.image_url ORDER BY mi.image_url SEPARATOR ',') AS image,
	       m.meeting_created_by AS createdBy
		FROM meeting m
		LEFT JOIN meeting_image mi ON m.meeting_id = mi.meeting_id
		WHERE m.member_email = #{email}
		AND	m.meeting_id = #{meetingId}
		GROUP BY m.meeting_id, 
		         m.meeting_type, 
		         m.meeting_name, 
		         m.meeting_date, 
		         m.meeting_registration_end, 
		         m.meeting_location, 
		         m.meeting_participant_count, 
		         m.meeting_capacity, 
		         m.meeting_created_by
	</select>
	
	<select id="gatheringsSelectList" resultType="com.dallam.backend.dto.response.GatheringsSelectListResponse" parameterType="com.dallam.backend.dto.request.GatheringsSelectListRequest">
        SELECT 
            m.meeting_id AS id, 
	        m.meeting_type AS type, 
	        m.meeting_name AS name, 
	        m.meeting_date AS dateTime, 
	        m.meeting_registration_end AS registrationEnd , 
	        m.meeting_location AS location, 
	        m.meeting_participant_count AS participantCount, 
	        m.meeting_capacity AS capacity, 
	        GROUP_CONCAT(mi.image_url ORDER BY mi.image_url SEPARATOR ',') AS image,
	        m.meeting_created_by AS createdBy,
            m.meeting_cancel_date AS canceledAt
        FROM meeting m
        LEFT JOIN meeting_image mi ON m.meeting_id = mi.meeting_id
        WHERE 1=1
        	AND m.meeting_cancel_date IS NULL
        <if test="idList != null">
            AND m.meeting_id IN 
            <foreach item="item" collection="idList" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="type != null">
            AND m.meeting_type = #{type}
        </if>
        <if test="location != null">
            AND m.meeting_location = #{location}
        </if>
        <if test="date != null">
            AND DATE_FORMAT(m.meeting_date, '%Y-%m-%d') = #{date}
        </if>
        <if test="createBy > 0">
            AND m.meeting_created_by = #{createdBy}
        </if>
        GROUP BY m.meeting_id, m.meeting_type, m.meeting_name, m.meeting_date, m.meeting_registration_end, 
             m.meeting_location, m.meeting_participant_count, m.meeting_capacity, m.meeting_created_by, m.meeting_cancel_date
        <if test="sortBy != null">
            ORDER BY 
            <choose>
                <when test="sortBy == 'dateTime'">m.meeting_date</when>
                <when test="sortBy == 'registrationEnd'">m.meeting_registration_end</when>
                <when test="sortBy == 'participantCount'">m.meeting_participant_count</when>
            </choose>
            <choose>
                <when test="sortOrder == 'desc'">DESC</when>
                <otherwise>ASC</otherwise>
            </choose>
        </if>
        <if test="offset >= 0 and limit > 0">
            LIMIT #{offset} , #{limit}
        </if>
    </select>
    
    <select id="gatheringsjoinedList" resultType="com.dallam.backend.dto.response.GatheringsjoinedListResponse" parameterType="com.dallam.backend.dto.request.GatheringsjoinedListRequest">
    	SELECT 
    		um.meeting_id AS id,
            m.meeting_type AS type,
            m.meeting_name AS name,
            m.meeting_date AS dateTime,
            m.meeting_registration_end AS registrationEnd,
            m.meeting_location AS location,
            m.meeting_participant_count AS participantCount,
            m.meeting_capacity AS capacity,
            GROUP_CONCAT(mi.image_url ORDER BY mi.image_url SEPARATOR ',') AS image,  <!-- 이미지 컬럼 -->
            m.meeting_created_by AS createdBy,
            m.meeting_cancel_date AS canceledAt,
            um.meeting_joined_at AS joinedAt,
    		CASE 
		        WHEN um.meeting_participation = 'Y' THEN 'true'
		        WHEN um.meeting_participation = 'N' THEN 'false'
		        ELSE NULL
		    END AS isCompleted,
		    CASE 
		        WHEN um.meeting_reviewed = 'Y' THEN 'true'
		        WHEN um.meeting_reviewed = 'N' THEN 'false'
		        ELSE NULL
		    END AS isReviewed
    	FROM user_meeting um
    	JOIN meeting m ON um.meeting_id = m.meeting_id
    	LEFT JOIN meeting_image mi ON m.meeting_id = mi.meeting_id
    	WHERE
    		um.member_email = #{email}
    		<if test="completed == false">
	    		AND um.meeting_participation = 'N'    		
    		</if>
    		<if test="completed == true">
	    		AND um.meeting_participation = 'Y'    		
    		</if>
    		<if test="reviewed == false">
	    		AND um.meeting_reviewed = 'N'  		
    		</if>
    		<if test="reviewed == true">
	    		AND um.meeting_reviewed = 'Y'  		
    		</if>
    	GROUP BY um.meeting_id, m.meeting_type, m.meeting_name, 
	    	m.meeting_date, m.meeting_registration_end, m.meeting_location, 
	    	m.meeting_participant_count, m.meeting_capacity, m.meeting_created_by, 
	    	m.meeting_cancel_date, um.meeting_joined_at, um.meeting_participation, 
	    	um.meeting_reviewed
    		ORDER BY 
    		<choose>
                <when test="sortBy == 'registrationEnd'">m.meeting_registration_end</when>
                <when test="sortBy == 'joinedAt'">um.meeting_joined_at</when>
                <otherwise>m.meeting_date</otherwise>
    		</choose>
    		<choose>
                <when test="sortOrder == 'desc'">DESC</when>
                <otherwise>ASC</otherwise>
            </choose>
            <if test="offset >= 0 and limit > 0">
            	LIMIT #{offset} , #{limit}
	        </if>
    </select>
	
	<select id="gatheringsById" resultType="com.dallam.backend.dto.response.GatheringDetailResponse" parameterType="int">
		SELECT 
			m.meeting_id AS id,
            m.meeting_type AS type,
            m.meeting_name AS name,
            m.meeting_date AS dateTime,
            m.meeting_registration_end AS registrationEnd,
            m.meeting_location AS location,
            m.meeting_participant_count AS participantCount,
            m.meeting_capacity AS capacity,
            GROUP_CONCAT(mi.image_url ORDER BY mi.image_url SEPARATOR ',') AS image,  <!-- 이미지 컬럼 -->
            m.meeting_created_by AS createdBy,
            m.meeting_cancel_date AS canceledAt
		FROM meeting m
		LEFT JOIN meeting_image mi ON m.meeting_id = mi.meeting_id
		WHERE
			m.meeting_id = #{id}
		GROUP BY m.meeting_id, m.meeting_type, m.meeting_name, 
	    	m.meeting_date, m.meeting_registration_end, m.meeting_location, 
	    	m.meeting_participant_count, m.meeting_capacity, m.meeting_created_by, 
	    	m.meeting_cancel_date
	</select>
	
	<select id="gatheringsByIdCheck" resultType="int">
		SELECT count(*) FROM meeting WHERE meeting_id = #{id}
	</select>
	
	<select id="findParticipants" parameterType="map" resultType="map">
		SELECT 
		    m1.member_name AS "userId",
		    um.meeting_id AS "gatheringId",
		    um.meeting_joined_at AS "joinedAt",
		    m2.member_number AS "participantNumber",
		    m2.member_email AS "participantEmail",
		    m2.member_name AS "participantName",
		    m2.company_name AS "participantCompany",
		    pi.image_url AS "participantImage"
		FROM user_meeting um
		JOIN user m1 ON um.member_email = m1.member_email
		JOIN user m2 ON um.member_email = m2.member_email 
		LEFT JOIN user_profile_image pi ON m2.member_email = pi.member_email
		WHERE um.meeting_id = #{id}
		ORDER BY um.meeting_joined_at ASC
		LIMIT #{offset} , #{limit}
	</select>
	
	<select id="authority" resultType="int">
		SELECT count(*) 
		FROM meeting 
		WHERE member_email = #{email}
		AND meeting_id = #{meetingId}
		AND meeting_date > CURRENT_TIMESTAMP 
		AND meeting_cancel_date IS NULL
	</select>
	
	<update id="meetingCancel" parameterType="com.dallam.backend.dto.request.GatheringsCancelRequest">
		UPDATE meeting
		SET meeting_cancel_date = CURRENT_TIMESTAMP
		WHERE meeting_id = #{meetingId}
		AND	member_email = #{email}
	</update>
	
	<update id="userCancel" parameterType="map">
		UPDATE user_meeting
		SET meeting_cancel = 'Y'
		WHERE meeting_id = #{meetingId}
		AND EXISTS (
			SELECT 1
			FROM meeting
			WHERE meeting_id = #{meetingId}
			AND meeting_cancel_date IS NOT NULL
		)
	</update>
	
	<select id="gatheringsCancel" parameterType="map" resultType="com.dallam.backend.dto.response.GatheringsCancelResponse">
	    SELECT m.meeting_id AS id,
	           m.meeting_type AS type,
	           m.meeting_name AS name,
	           m.meeting_date AS dateTime,
	           m.meeting_registration_end AS registrationEnd,
	           m.meeting_location AS location,
	           m.meeting_participant_count AS participantCount,
	           m.meeting_capacity AS capacity,
	           GROUP_CONCAT(mi.image_url ORDER BY mi.image_url SEPARATOR ',') AS image,
	           m.meeting_created_by AS createdBy,
	           m.meeting_cancel_date AS canceledAt
	    FROM meeting m
	    LEFT JOIN meeting_image mi ON m.meeting_id = mi.meeting_id
	    WHERE m.meeting_id = #{meetingId}
	    AND m.MEMBER_EMAIL = #{email}
	    AND m.MEETING_CANCELDAT IS NOT NULL
	    GROUP BY m.meeting_id, 
	             m.meeting_type, 
	             m.meeting_name, 
	             m.meeting_date, 
	             m.meeting_registration_end, 
	             m.meeting_location, 
	             m.meeting_participant_count, 
	             m.meeting_capacity, 
	             m.meeting_created_by,
	             m.meeting_cancel_date
	</select>

	
	<select id="meetingCheck" resultType="int">
		SELECT count(*) 
		FROM meeting 
		WHERE meeting_id = #{id}
		AND meeting_date > CURRENT_TIMESTAMP 
		AND meeting_cancel_date IS NULL
	</select>
	
	<select id="userMeetingCheck" resultType="String">
		SELECT meeting_cancel 
		FROM user_meeting 
		WHERE meeting_id = #{meetingId}
		AND member_email = #{email}
	</select>
	
	<update id="updateUserMeeting" parameterType="map">
		UPDATE user_meeting
		SET meeting_cancel = 'N',
			meeting_joined_at = CURRENT_TIMESTAMP
		WHERE meeting_id = #{meetingId}
		AND member_email = #{email}
	</update>
	
	<insert id="insertUserMeeting">
		INSERT INTO user_meeting 
		(member_email, meeting_id, meeting_participation, 
		meeting_cancel, meeting_joined_at, meeting_reviewed)
		VALUES(#{email}, #{meetingId}, 'N', 'N', CURRENT_TIMESTAMP, 'N')
	</insert>
	
	<select id="isParticipant" resultType="int">
		SELECT count(*) 
        FROM user_meeting
        WHERE meeting_id = #{meetingId}
        AND member_email = #{email}
	</select>
	
	<select id="isPastGathering" resultType="int">
        SELECT count(*) 
        FROM meeting
        WHERE meeting_id = #{meetingId}
        AND meeting_date <![CDATA[ < ]]> CURRENT_TIMESTAMP
    </select>
    
    <update id="cancelParticipation" parameterType="map">
        UPDATE user_meeting
        SET meeting_cancel = 'Y'
        WHERE meeting_id = #{meetingId}
        AND member_email = #{email}
        AND meeting_cancel = 'N'
    </update>
	
</mapper>