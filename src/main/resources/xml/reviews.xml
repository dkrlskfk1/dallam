<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="reviews">

	<select id="gatheringsParticipation" resultType="int">
		SELECT count(*) 
        FROM user_meeting
        WHERE meeting_id = #{meetingId}
        AND member_email = #{email}
        AND meeting_participation = 'Y'
	</select>
	
	<select id="reviewCreateCheck" resultType="int">
		SELECT count(*) 
        FROM review
        WHERE meeting_id = #{meetingId}
        AND member_email = #{email}
	</select>
	
	<insert id="reviewsCreate">
		INSERT INTO review
		(member_email, meeting_id, score, review_comment, create_at, review_id)
		VALUES(#{email}, #{meetingId}, #{score}, #{comment}, CURRENT_TIMESTAMP, REVIEW_ID_SEQ.NEXTVAL)
	</insert>
	
	<select id="createReviews" parameterType="map" resultType="com.dallam.backend.dto.response.ReviewsCreateResponse">
		SELECT 
			r.review_id AS id, 
			m.member_name AS userId,
			r.meeting_id AS gatheringId,
			r.score AS score,
			r.review_comment AS comments,
			r.create_at AS createdAt
		FROM review r
		JOIN user m ON r.member_email = m.member_email
		WHERE r.member_email = #{email}
		AND r.review_id = #{meetingId}
	</select>
	
    <select id="getReviewsList" resultType="com.dallam.backend.dto.response.ReviewsListResponse">
        SELECT 
            r.review_id AS id,
            r.score AS score,
            r.review_comment AS "comment",
            r.create_at AS createdAt,
            m.meeting_id AS "gathering.id",
            m.meeting_type AS "gathering.type",
            m.meeting_name AS "gathering.name",
            m.meeting_date AS "gathering.dateTime",
            m.meeting_location AS "gathering.location",
            GROUP_CONCAT(mi.image_url ORDER BY mi.image_url SEPARATOR ',') AS "gathering.image",
            mem.member_number AS "user.id",
            mem.member_name AS "user.name",
            upi.image_url AS "user.image"
        FROM review r
        LEFT JOIN user mem ON r.member_email = mem.member_email
        LEFT JOIN user_profile_image upi ON mem.member_email = upi.member_email
        LEFT JOIN meeting m ON r.meeting_id = m.meeting_id
        LEFT JOIN meeting_image mi ON m.meeting_id = mi.meeting_id
        WHERE 1=1
            <if test="gatheringId != null">
                AND r.meeting_id = #{gatheringId}
            </if>
            <if test="userId != null">
                AND mem.member_number = #{userId}
            </if>
            <if test="type != null">
                AND m.meeting_type = #{type}
            </if>
            <if test="location != null">
                AND m.meeting_location = #{location}
            </if>
            <if test="date != null">
                AND DATE_FORMAT(m.meeting_date, '%Y-%m-%d') = #{date}
            </if>
            <if test="registrationEnd != null">
                AND DATE_FORMAT(m.meeting_registration_end, '%Y-%m-%d') = #{registrationEnd}
            </if>
        GROUP BY
        	r.review_id, r.score, r.review_comment, r.create_at, m.meeting_id, m.meeting_type,   
			m.meeting_name, m.meeting_date, m.meeting_location, mem.member_number, mem.member_name, upi.image_url
        ORDER BY 
            <choose>
                <when test="sortBy != null">
                    ${sortBy} ${sortOrder}
                </when>
                <otherwise>
                    r.create_at DESC
                </otherwise>
            </choose>
        LIMIT #{offset} , #{limit}
    </select>
    
    <select id="reviewsScoresList" parameterType="map" resultType="com.dallam.backend.dto.response.ReviewsScoresListResponse">
	    SELECT 
	        r.meeting_id AS gatheringId,
	        m.meeting_type AS type,
	        ROUND(AVG(r.score), 1) AS averageScore,
	        SUM(CASE WHEN r.score = 1 THEN 1 ELSE 0 END) AS oneStar,
	        SUM(CASE WHEN r.score = 2 THEN 1 ELSE 0 END) AS twoStars,
	        SUM(CASE WHEN r.score = 3 THEN 1 ELSE 0 END) AS threeStars,
	        SUM(CASE WHEN r.score = 4 THEN 1 ELSE 0 END) AS fourStars,
	        SUM(CASE WHEN r.score = 5 THEN 1 ELSE 0 END) AS fiveStars
	    FROM 
	        review r
	    LEFT JOIN 
	        meeting m ON r.meeting_id = m.meeting_id
	    WHERE r.meeting_id IN
	        <foreach item="id" collection="gatheringIds" open="(" separator="," close=")">
		        #{id}
		    </foreach>
		    AND m.meeting_type = #{type}
	    GROUP BY 
	        r.meeting_id, m.meeting_type
	    ORDER BY 
	        r.meeting_id
	</select>
	
</mapper>